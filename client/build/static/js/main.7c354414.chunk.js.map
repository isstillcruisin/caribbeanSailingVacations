{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Page","React","lazy","Promise","all","__webpack_require__","e","then","bind","AddBoat","AllBoats","BoatDetail","Home","SignIn","SignUp","SignOut","Background","styled","div","_templateObject","App","react_default","a","createElement","react_router_dom","react","fallback","react_router","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7c354414.chunk.js","sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Page = React.lazy(() => import(\"./components/Page\"));\nconst AddBoat = React.lazy(() => import(\"./pages/AddBoat\"));\nconst AllBoats = React.lazy(() => import(\"./pages/AllBoats\"));\nconst BoatDetail = React.lazy(() => import(\"./pages/BoatDetail\"));\nconst Home = React.lazy(() => import(\"./pages/Home\"));\nconst SignIn = React.lazy(() => import(\"./pages/SignIn\"));\nconst SignUp = React.lazy(() => import(\"./pages/SignUp\"));\nconst SignOut = React.lazy(() => import(\"./pages/SignOut\"));\n\nconst Background = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-image: url(\"https://res.cloudinary.com/dui3yyhou/image/upload/c_scale,w_2651/v1557514748/CaribbeanSailingVacations/artem-pochepetsky-127749-unsplash.webp\");\n  height: 100%;\n  width: 100%;\n  z-index: -1;\n  background-size: 100% 100%;\n  min-width: 100%;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  background-color: rgba(0.4, 0.4, 0.4, 0.3);\n  background-blend-mode: multiply;\n  background-repeat: no-repeat;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Suspense\n          fallback={\n            <Background>\n              <div>Loading...</div>\n            </Background>\n          }\n        >\n          <Background>\n            <Page>\n              <Switch>\n                <Route exact path=\"/add-boat\" component={AddBoat} />\n                <Route exact path=\"/boats\" component={AllBoats} />\n                <Route exact path=\"/sign-in\" component={SignIn} />\n                <Route exact path=\"/sign-up\" component={SignUp} />\n                <Route exact path=\"/sign-out\" component={SignOut} />\n                <Route path=\"/boat/:id\" component={BoatDetail} />\n                <Route path=\"/\" component={Home} />\n              </Switch>\n            </Page>\n          </Background>\n        </Suspense>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}